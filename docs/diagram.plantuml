@startuml temple_of_doom
enum Side {
  NORTH
  EAST
  SOUTH
  WEST
}

interface IRenderable {
    + Color: ConsoleColor
}

class Factory {
    - Namespace: String
    - ConvertString(string name): String
    + Create(string name): <T>
}

class Provider {
    - Observers: List<IObserver<T>>
    - Notify(T value)
    + Subscribe(IObserver<T> observer): IDisposable
}

class UnSubscriber {
    - Observers: List<IObserver<T>>
    - Observer: IObserver<T>
    + Dispose()
}

class Game {
    - Rlayer: Player
    - Rooms: List<Room>
    + GetCurrentRoom(): Room
    + GetRoomById(): Room
    + UseEntity(Tile tile): Entity
    + UseConnection(Tile tile): Boolean
    + GetPlayerLives(): Integer
    + IsOver(): Boolean
    + HasBeenWon(): Boolean
    + UseEntity(Tile tile): Entity
    + MovePlayer(Position newPosition)
}

class Tile {
    + Player: Player
    + Entity: Entity
    + Connection: Connection
    + Position: Position
    + GetVisual(): IRenderable
}

class Room {
    + Id: Integer
    + Width: Integer
    + Height: Integer
    + Tiles: Dictionary<Position, Tile>
    - GenerateRoom()
    - IsWall()
    + GetTileByPosition(int x, int y): Tile
    + GetTilesByDoor<T>(): List<Tile> 
    + GetSpawnPosition(Side direction): Position
    + GetTileByItem(Entity entity): Tile
    + AddConnection(Side direction, Connection connection)
    + GetConnections(): List<Connection>
    + SpawnPlayer(Position position, Player player)
    + GetPlayerPosition(): Position
    + RemovePlayer()
}

class Position {
    + X: Integer
    + Y: Integer
    # Equals(Position other): Boolean
}

class Player {
    - Inventory: List<Entity>
    + StartPosition: Position
    + StartRoomId: Integer
    + Lives: Integer
    + GetInventory<T>
    + Move(Room room, Position movePosition): Tile
    + Hurt(int damage): Integer
    + AddToInventory(Entity item)
    + GetAmountOfSankaraStones(): Integer
}

class Connection {
    + Door: Door
    + Connections: Dictionary<Side, Room>
    + Enter(Room currentRoom, Player player): KeyValuePair<Side, Room>
}

abstract Entity {
    + Damage: Integer
    + Interact(Player player, Room room): Entity
    + IsInteractable(): Boolean
}

class Wall {}
class SankaraStone {}
class PressurePlate {}
class Key {}
class Boobietrap {}
class DisappearingBoobietrap {}

abstract Door {
    # Open: Boolean
    + Toggle()
    + Enter(Player player): Boolean
    + CanEnter(Player player)
}

class ToggleDoor {}
class ColoredDoor {}
class ClosingGateDoor {}

class GameReader {
    - CreatePlayer(JObject json): Player
    - CreateRooms(JObject json, Player player): List<Room>
    - CreateEntities(Room room, JToken items)
    - GenerateConnections(Game game, JToken json)
    - GetConsoleColorByString(string color): ConsoleColor
    + Read(string filePath): Game
}

class Program {
    - UnSubscriber: IDisposable
    - Controller: Controller
    - View: View
    - IsRunning: Boolean
    + Game Game
    + Exit()
    + OpenController(): Controller
    + Input()
    + OnCompleted()
    + OnError(Exception error)
    + OnNext(Game value)
}

Game --|> Provider
Player --|> IRenderable
Connection --|> IRenderable
Entity --|> IRenderable
Door --|> IRenderable

Wall --|> Entity
SankaraStone --|> Entity
PressurePlate --|> Entity
Key --|> Entity
Boobietrap --|> Entity
DisappearingBoobietrap --|> Boobietrap

ToggleDoor --|> Door
ColoredDoor --|> Door
ClosingGateDoor --|> Door

Tile --- Player
Tile --- Entity
Tile --- Room
Tile --- Position

Game --- Player
Game --- Room
Game --- Connection
Game --- Entity
Game --- Position

Player --- Position

Provider --- UnSubscriber

Program --- UnSubscriber
Program --- Game

Side --- Room
Side --- Connection

GameReader --- Game
GameReader --- Player
GameReader --- Room
GameReader --- Connection
GameReader --- Entity
GameReader --- Factory
@enduml